package com.workitem.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.workitem.DTO.VehicleWorkitemDTO;
import com.workitem.DTO.WorkitemDTO;
import com.workitem.entity.Harbor;
import com.workitem.entity.VehicleWorkitem;
import com.workitem.entity.Workitem;
import com.workitem.repository.HarborRepository;
import com.workitem.repository.VehicleWorkitemRepository;
import com.workitem.repository.WorkitemRepository;

@Service("workitemService")
@Transactional
public class WorkitemServiceImpl implements WorkitemService{
    
	private static int count=2016;
    @Autowired
    WorkitemRepository workitemRepository;
    
    @Autowired
    VehicleWorkitemRepository vehicleWorkitemRepository;
    
    @Autowired
    HarborRepository harborRepository;
    
	public WorkitemDTO createWorkitem(WorkitemDTO workitemDTO) {
		Optional<Workitem> tempWorkitem = workitemRepository.findByUserId(workitemDTO.getUserId());
		if(tempWorkitem.isPresent()) {
			workitemDTO.setWorkitemId(tempWorkitem.get().getWorkitemId());
			workitemDTO.setAmount(tempWorkitem.get().getAmount());
			return workitemDTO;
		}
		else {
			workitemDTO.setWorkitemId("J"+autoGeneratedID());
			String part[]=workitemDTO.getQuantity().split(" ");
			if(workitemDTO.getItemType().equals("Computer Hardware")) {
				
				workitemDTO.setAmount(Integer.parseInt(part[0])*15999);
				
			}
			else if(workitemDTO.getItemType().equals("Oil Container")) {
				Integer amount =Integer.parseInt(part[0])*22;
				workitemDTO.setAmount(amount);
			}
			else if(workitemDTO.getItemType().equals("Wood")) {
				Integer amount =Integer.parseInt(part[0])*130000;
				workitemDTO.setAmount(amount);
			}
			else if(workitemDTO.getItemType().equals("Motorcycles")) {
				Integer amount =Integer.parseInt(part[0])*6336;
				workitemDTO.setAmount(amount);
			}
			else {
				Integer amount =Integer.parseInt(part[0])*13490;
				workitemDTO.setAmount(amount);
			}
			workitemRepository.saveAndFlush(workitemDTO.createEntity(workitemDTO));
			return workitemDTO;
		}
	}
	private int autoGeneratedID() {
		int id=count++;
		return id;
	}
	public String updateWorkitemId(String workitemId, WorkitemDTO workitemDTO) {
//		Optional<Workitem> tempWorkitem = workitemRepository.findById(workitemId);
		Optional<Workitem> tempWorkitem=workitemRepository.findById(workitemId);
		String message;
		if(tempWorkitem.isPresent()) {
			workitemRepository.updateLocationAndShippingDate(workitemDTO.getSelectedHarborLocation(),workitemDTO.getShippingDate(),workitemId);
			message="Harbor location and Shipping date got updated successfully";
		}
		else {
			message="Invalid Data";
		}
		return message;
	}
	public List<String> fetchAvailableHarborLocations(String country) throws Exception{
		 Optional<Harbor> tempHarbor=harborRepository.findById(country);
		 if(tempHarbor.isPresent()) {
			 List<String> str = new ArrayList<>();
			 String availableHarborLocation[] = tempHarbor.get().getAvailableHarborLocations().split(", ");
			 for(String location : availableHarborLocation) {
				 str.add(location);
			 }
			 return str;
		 }
		 else {
			 throw new Exception("Invalid Country");
		 }
	}
	public List<WorkitemDTO> fetchWorkitemDetails(){
		List<Workitem> workitems =workitemRepository.findAll();
		List<WorkitemDTO> workitemsDTO = new ArrayList<>();
		for(Workitem workitem : workitems) {
			workitemsDTO.add(WorkitemDTO.valueOf(workitem));
		}
		return workitemsDTO;
	}
	public List<WorkitemDTO> trackWorkitemByUser(Long userId){
		 List<Workitem> workitems = workitemRepository.findByUserId1(userId);
		 List<WorkitemDTO> workitemsDTO = new ArrayList<>();
			for(Workitem workitem : workitems) {
				workitemsDTO.add(WorkitemDTO.valueOf(workitem));
			}
			return workitemsDTO;
	}
    public VehicleWorkitemDTO fetchWorkitemStatus(String workitemId) throws Exception{
    	Optional<VehicleWorkitem> tempVehicleWorkitem = vehicleWorkitemRepository.findById(workitemId);
    	if(tempVehicleWorkitem.isPresent()) {
    		VehicleWorkitemDTO dto = VehicleWorkitemDTO.valueOf(tempVehicleWorkitem.get());
    		return dto;
    	}
    	else {
    		throw new Exception("Invalid Data");
    	}
    }
//	//public TerminalDTO updateWorkitemStatus(String workitemId, TerminalDTO terminalDTO);
//	public WorkitemDTO fetchWorkitemById(String workitemId) {
//		
//	}
//	//public TerminalDTO findTerminalForWorkitem(WorkitemDTO workitemDTO,List<TerminalDTO> terminals);
//	public String assignTerminalForWorkitem(String workitemId,String terminalId) {
//		
//	}
//	//public WorkitemTerminalDTO fetchTerminalByWorkitem(String workitemId);
    public VehicleWorkitemDTO fetchWorkItemDetailsByVehicleNumber(String vehicleNumber) {
    	Optional<VehicleWorkitem> tempVehicleWorkitem = vehicleWorkitemRepository.findByVehicleNumber(vehicleNumber);
    	VehicleWorkitemDTO dto = new VehicleWorkitemDTO();
    	if(tempVehicleWorkitem.isPresent()) {
    		 dto = VehicleWorkitemDTO.valueOf(tempVehicleWorkitem.get());    		
    	}
    	
    	return dto;
    }
//	//public String allocateVehicle(String workitemId, List<VehicleDTO> vehicleDTOList);
//	//public VehicleDTO findVehicleForWorkitem(String workitemId, List<VehicleDTO> vehicleDTOList);
//	
}
