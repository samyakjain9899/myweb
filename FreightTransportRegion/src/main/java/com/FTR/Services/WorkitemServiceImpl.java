package com.FTR.Services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;

import com.FTR.DTO.WorkitemDTO;
import com.FTR.DTO.WorkitemTerminalDTO;
import com.FTR.DTO.WorkitemVehicleDTO;
import com.FTR.Entity.Workitems;
import com.FTR.Repository.WorkitemRepository;
import com.FTR.exceptions.HarborNotFoundException;
import com.FTR.exceptions.WorkItemNotFoundException;




public class WorkitemServiceImpl {
	private static int count=2016;
	@Autowired
	WorkitemDTO workitemDto;
	@Autowired
	WorkitemRepository workitemRepository;
	@Autowired
	private Environment environment;

	//	This method is used to insert the new workitem details  and generate workitemId as per sample data. Validate the inputs according to DTO validations.
	     public WorkitemDTO createWorkitem(WorkitemDTO workitemDTO) {
	    	 Optional<Workitems> tempWorkitem = workitemRepository.findByUserId(workitemDTO.getUserId());
	 		if(tempWorkitem.isPresent()) {
	 			workitemDTO.setWorkitemId(tempWorkitem.get().getWorkitemId());
	 			workitemDTO.setAmount(tempWorkitem.get().getAmount());
	 			return workitemDTO;
	 		}
	 		else {
	 			workitemDTO.setWorkitemId("J"+autoGeneratedID());
	 			String part[]=workitemDTO.getQuantity().split(" ");
	 			if(workitemDTO.getItemType().equals("Computer Hardware")) {
	 				
	 				workitemDTO.setAmount(Integer.parseInt(part[0])*15999);
	 				
	 			}
	 			else if(workitemDTO.getItemType().equals("Oil Container")) {
	 				Integer amount =Integer.parseInt(part[0])*22;
	 				workitemDTO.setAmount(amount);
	 			}
	 			else if(workitemDTO.getItemType().equals("Wood")) {
	 				Integer amount =Integer.parseInt(part[0])*130000;
	 				workitemDTO.setAmount(amount);
	 			}
	 			else if(workitemDTO.getItemType().equals("Motorcycles")) {
	 				Integer amount =Integer.parseInt(part[0])*6336;
	 				workitemDTO.setAmount(amount);
	 			}
	 			else {
	 				Integer amount =Integer.parseInt(part[0])*13490;
	 				workitemDTO.setAmount(amount);
	 			}
	 			workitemRepository.saveAndFlush(workitemDTO.createDtoToEntity(workitemDTO));
	 			return workitemDTO;
	 		}
	    
	     }
	     
	     private int autoGeneratedID() {
	 		int id=count++;
	 		return id;
	 	}
	//	This method is used to update the shipping date and harbor location. Throw appropriate error message if the workitem is not found.
	     public String updateWorkitemId(String workitemId, WorkitemDTO workitemDTO){
	    		Optional<Workitems> tempWorkitem =Optional.ofNullable(workitemRepository.findByWorkitemId(workitemId));
	    		String message;
	    		if(tempWorkitem.isPresent()) {
	    			workitemRepository.updateLocationAndShippingDate(workitemDTO.getOriginHarborLocation(),workitemDTO.getShippingDate(),workitemId);
	    			message="Harbor location and Shipping date got updated successfully";
	    		}
	    		else {
	    			message="Invalid Data";
	    		}
	    		return message;
	     }
	
	     
	     
    //Return the harbor locations based on the given country.
	     public List<String> fetchAvailableHarborLocations(String country) throws HarborNotFoundException{
			 Optional<Workitems> tempHarbor=workitemRepository.findBySourcecountry(country);
			 if(tempHarbor.isPresent()) {
				 List<String> str = new ArrayList<>();
				 String availableHarborLocation[] = tempHarbor.get().getOriginHarborLocation().split(", ");
				 for(String location : availableHarborLocation) {
					 str.add(location);
				 }
				 return str;
			 }
			 else {
				 throw new HarborNotFoundException(environment.getProperty("harbor.notFound"));
			 }
		}
   
     
     
     //Return all the workitem details. If there are no workitems available then throw proper error message.
      public List<WorkitemDTO> fetchWorkItemDetails() throws WorkItemNotFoundException{
    		List<Workitems> workitems =workitemRepository.findAll();
    		List<WorkitemDTO> workitemsDTO = new ArrayList<>();
    		for(Workitems workitem : workitems) {
    			workitemsDTO.add(WorkitemDTO.createEntityToDto(workitem));
    			
    		}
    		if (workitems.size()==0) {
    			throw new WorkItemNotFoundException(environment.getProperty("workitem.notFound"));
    		}
    		return workitemsDTO;
    	  
      }
	
      
      
      
      //	Fetch the workitems created by the user based on the userId.  If there are no workitems found then throw proper error message
  	public List<WorkitemDTO> trackWorkitemByUser(Long userId){
  		 List<Workitems> workitems = workitemRepository.findByUserId1(userId);
		 List<WorkitemDTO> workitemsDTO = new ArrayList<>();
			for(Workitems workitem : workitems) {
				workitemsDTO.add(WorkitemDTO.createEntityToDto(workitem));
			}
			return workitemsDTO;
  		
  	}
	
  	
  	
  	//Return the workitem details along with assigned vehicle details based on the workitemId.
//	public WorkitemVehicleDTO fetchWorkitemStatus(String workitemId)throws Exception{
//    	Optional<VehicleWorkitem> tempVehicleWorkitem = vehicleWorkitemRepository.findById(workitemId);
//    	if(tempVehicleWorkitem.isPresent()) {
//    		WorkitemVehicleDTO dto = WorkitemVehicleDTO.createEntityToDto(tempVehicleWorkitem.get());
//    		return dto;
//    	}
//    	else {
//    		throw new Exception("Invalid Data");
//    	
//	}
	
	
	
	//Update the workitem status as "Completed' if the shipping date is equal to the current date and release the assigned terminal. Throw WORKITEM_NOT_FOUND if the workitem is not found.
	//public TerminalDTO updateWorkItemStatus(String workitemId, TerminalDTO terminalDto){}
	
	
	
	//	Return the workitem details based on the workitemId.
    public WorkitemDTO	fetchWorkItemById(String workitemId){
    	Workitems ftrworkitems = workitemRepository.findByWorkitemId(workitemId);
    	WorkitemDTO workitemDto= WorkitemDTO.createEntityToDto(ftrworkitems);
    	 return workitemDto;
    	
	
}
	//	This method helps to identify the available terminal for a new workitem.
	 //public TerminalDTO findTerminalForWorkitem(WorkitemDTO workitemDto, List<TerminalDTO> terminals)
	
	 
	 
	 //This mehod is used to assign the terminal for new workitem based on the item type.
	 //public String assignTerminalForWorkitem(String workitemId, String terminalId){}	
	
	 
	 
	 //	Fetch the woritemdetails along with the assigned terminal details
	// public WorkitemTerminalDTO fetchTerminalByWorkitem(String workitemId){}
	
	 
	 
	 //	Return the workitem details based on the vehicle number.
	// public WorkitemVehicleDTO fetchWorkItemDetailsByVehicleNumber(String vehicleNumber){}
	
	 
	 
	 //	Check the workitem is valid, if valida then check the workitem is assigned with vehicle already if yes then throw WORKITEM_VEHICLE_ALLOCATED else allocate a new vehicle for the given workitem id.
	 //public String allocateVehicle(String workitemId,List<VehicleDTO> vehicleDtoList){}
	
	 
	 
	 // 	Identify the available vehicle for the workitem.
	// public VehicleDTO findVehicleForWorkitem(String workitemId,List<VehicleDTO> vehicleDtoList){}
	 
	 
}
